# Define your credentials
$username = "REDACTED"
$password = ConvertTo-SecureString "REDACTED" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $password)

# Initial URL
$uri = 'REDACTED'

# Create a single WebRequestSession to preserve cookies and tokens
$session = New-Object Microsoft.PowerShell.Commands.WebRequestSession

# Set maximum redirects to prevent infinite loops
$maxRedirects = 10
$currentRedirect = 0
$visitedUrls = @{}

$currentUrl = $uri

while ($currentRedirect -lt $maxRedirects) {
    if ($visitedUrls.ContainsKey($currentUrl)) {
        Write-Error "Redirect loop detected at URL: $currentUrl"
        break
    }
    $visitedUrls[$currentUrl] = $true

    try {
        # Make the web request
        $response = Invoke-WebRequest -Uri $currentUrl `
            -Method Get `
            -UserAgent "curl/123" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -WebSession $session `
            -Credential $cred `
            -Headers @{
                Accept = "*/*"
                "Accept-Encoding" = "gzip, deflate"
            } `
            -PreserveAuthorizationOnRedirect `
            -MaximumRedirection 0

        # Check for forms in the response
        if ($response.ParsedHtml -and $response.ParsedHtml.getElementsByTagName('form').length -gt 0) {
            $form = $response.Forms[0]
            Write-Host "Form detected at URL: $currentUrl"

            # You might need to fill in additional form fields here
            # For example, if there are hidden fields that need specific values
            # $form.Fields['fieldName'] = 'fieldValue'

            # Submit the form
            $response = Invoke-WebRequest -Uri ($form.Action) `
                -Method Post `
                -WebSession $session `
                -Body $form.Fields `
                -Headers @{
                    Accept = "*/*"
                    "Accept-Encoding" = "gzip, deflate"
                }

            # Assuming the form submission is successful, break the loop
            break
        }

        # If there's a 'Location' header, follow the redirect
        if ($response.Headers['Location']) {
            $currentUrl = $response.Headers['Location']
            Write-Host "Redirecting to: $currentUrl"
            $currentRedirect++
            continue
        } else {
            # No more redirects, assume final response
            break
        }
    } catch [System.Net.WebException] {
        $resp = $_.Exception.Response
        if ($resp -and $resp.Headers['Location']) {
            $currentUrl = $resp.Headers['Location']
            Write-Host "Redirecting to: $currentUrl"
            $currentRedirect++
            continue
        } else {
            Write-Error "Request failed: $($_.Exception.Message)"
            break
        }
    }
}

# Output the final response
if ($response) {
    Write-Host "Final response received."
    Write-Host "Status Code: $($response.StatusCode)"
    Write-Host "Content Length: $($response.RawContentLength)"
    # Process the response content if needed
    # Write-Host $response.Content
} else {
    Write-Error "Failed to retrieve a valid response."
}
