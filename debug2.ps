function Get-NewToken {
    param (
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(Mandatory=$true)]
        [string]$AuthUrl
    )
    
    try {
        $session = $null
        
        # Initial authentication request with redirect handling
        $response = Invoke-WebRequest -Uri $AuthUrl `
            -Method Get `
            -UserAgent "curl/7.88.1" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -SessionVariable session `
            -Credential $Credential `
            -Headers @{
                Accept = "*/*"
                "Accept-Encoding" = "gzip, deflate"
            } `
            -MaximumRedirection 0 `
            -ErrorAction SilentlyContinue
            
        # Handle 302 redirect explicitly
        if ($response.StatusCode -eq 302 -or $response.StatusCode -eq 301) {
            $redirectUrl = $response.Headers.Location
            Write-Verbose "Following redirect to: $redirectUrl"
            
            # Follow the redirect with the same session
            $response = Invoke-WebRequest -Uri $redirectUrl `
                -Method Get `
                -UserAgent "curl/7.88.1" `
                -AllowUnencryptedAuthentication `
                -NoProxy `
                -WebSession $session `
                -Headers @{
                    Accept = "*/*"
                    "Accept-Encoding" = "gzip, deflate"
                } `
                -MaximumRedirection 0 `
                -ErrorAction SilentlyContinue
                
            # Store the redirect URL for future use
            $script:LastRedirectUrl = $redirectUrl
        }
        
        if ($null -eq $session) {
            throw "Failed to create session"
        }
        
        return @{
            Session = $session
            Response = $response
            RedirectUrl = $script:LastRedirectUrl
        }
    }
    catch {
        $errorMessage = $_.Exception.Message
        if ($_.Exception.Response) {
            $errorMessage += "`nResponse Status Code: $($_.Exception.Response.StatusCode.value__)"
            $errorMessage += "`nResponse Status Description: $($_.Exception.Response.StatusDescription)"
        }
        Write-Error "Error in Get-NewToken: $errorMessage"
        throw
    }
}

function Invoke-AuthenticatedRequest {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Url,
        [Parameter(Mandatory=$true)]
        [Microsoft.PowerShell.Commands.WebRequestSession]$Session,
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(Mandatory=$true)]
        [string]$InitialAuthUrl,
        [switch]$FollowRedirect,
        [int]$RetryCount = 1
    )
    
    try {
        $response = Invoke-WebRequest -Uri $Url `
            -Method Get `
            -UserAgent "curl/7.88.1" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -WebSession $Session `
            -Headers @{
                Accept = "*/*"
                "Accept-Encoding" = "gzip, deflate"
            } `
            -MaximumRedirection $(if ($FollowRedirect) { 5 } else { 0 }) `
            -ErrorAction SilentlyContinue
            
        # Handle redirect if needed and not automatically following
        if ((-not $FollowRedirect) -and ($response.StatusCode -eq 302 -or $response.StatusCode -eq 301)) {
            $redirectUrl = $response.Headers.Location
            Write-Verbose "Following redirect to: $redirectUrl"
            
            $response = Invoke-WebRequest -Uri $redirectUrl `
                -Method Get `
                -UserAgent "curl/7.88.1" `
                -AllowUnencryptedAuthentication `
                -NoProxy `
                -WebSession $Session `
                -Headers @{
                    Accept = "*/*"
                    "Accept-Encoding" = "gzip, deflate"
                } `
                -MaximumRedirection 0
        }
            
        return $response
    }
    catch {
        if ($RetryCount -gt 0 -and 
            ($_.Exception.Response.StatusCode -eq 401 -or 
             $_.Exception.Response.StatusCode -eq 302)) {
            Write-Verbose "Authentication failed or redirect needed, attempting refresh..."
            
            # Get new token
            $newAuth = Get-NewToken -Credential $Credential -AuthUrl $InitialAuthUrl
            
            # Retry with new session
            return Invoke-AuthenticatedRequest `
                -Url $Url `
                -Session $newAuth.Session `
                -Credential $Credential `
                -InitialAuthUrl $InitialAuthUrl `
                -FollowRedirect:$FollowRedirect `
                -RetryCount ($RetryCount - 1)
        }
        
        throw
    }
}

# Example usage
try {
    # Enable verbose output
    $VerbosePreference = "Continue"
    
    # Create credential object (replace with your actual credentials)
    $securePass = ConvertTo-SecureString $password -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential($username, $securePass)
    
    # Initial authentication
    Write-Host "Performing initial authentication..."
    $auth = Get-NewToken -Credential $cred -AuthUrl $firstUrl
    $session = $auth.Session
    
    # Get redirect URL from initial response
    $nextUrl = $auth.RedirectUrl
    Write-Host "Next URL: $nextUrl"
    
    # Make subsequent request with redirect handling
    $response2 = Invoke-AuthenticatedRequest `
        -Url $nextUrl `
        -Session $session `
        -Credential $cred `
        -InitialAuthUrl $firstUrl `
        -FollowRedirect
    
    Write-Host "Request completed successfully"
    $response2.Content
}
catch {
    Write-Error "Script failed: $($_.Exception.Message)"
    if ($_.Exception.Response) {
        Write-Error "Response Status Code: $($_.Exception.Response.StatusCode.value__)"
        Write-Error "Response Status Description: $($_.Exception.Response.StatusDescription)"
    }
    throw
}