# Define your credentials
$username = "REDACTED"
$password = ConvertTo-SecureString "REDACTED" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $password)

# Initial URL
$uri = 'REDACTED'

# Create a single WebRequestSession to preserve cookies
$webSession = New-Object Microsoft.PowerShell.Commands.WebRequestSession

# Set maximum redirects to prevent infinite loops
$maxRedirects = 10
$currentRedirect = 0
$currentUrl = $uri

# Loop to handle redirects
while ($currentRedirect -lt $maxRedirects) {
    try {
        # Make the web request
        $response = Invoke-WebRequest -Uri $currentUrl `
            -UserAgent "curl/123" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -WebSession $webSession `
            -Credential $cred `
            -Headers @{
                Accept = "*/*"
                "Accept-Encoding" = "gzip, deflate"
            } `
            -PreserveAuthorizationOnRedirect `
            -MaximumRedirection 0

        # If no exception, we have a final response
        break
    } catch [System.Net.WebException] {
        $resp = $_.Exception.Response

        # Check if it's a redirect
        if ($resp -and ($resp.StatusCode -eq [System.Net.HttpStatusCode]::Found -or $resp.StatusCode -eq [System.Net.HttpStatusCode]::MovedPermanently)) {
            $currentUrl = $resp.Headers['Location']
            Write-Host "Redirecting to: $currentUrl"
            $currentRedirect++
            continue
        } elseif ($resp -and $resp.StatusCode -eq [System.Net.HttpStatusCode]::Unauthorized) {
            # Handle 401 Unauthorized if needed
            Write-Error "Authentication failed with status 401."
            break
        } else {
            # Other errors
            Write-Error "Request failed with status $($resp.StatusCode): $($resp.StatusDescription)"
            break
        }
    }
}

# Output the final response
if ($response) {
    Write-Host "Final response status: $($response.StatusCode)"
    Write-Host "Final response content length: $($response.RawContentLength)"
} else {
    Write-Error "Failed to retrieve a valid response."
}
