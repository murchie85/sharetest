# Define your credentials
$username = "REDACTED"
$password = ConvertTo-SecureString "REDACTED" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $password)

# Initial URL
$uri = 'REDACTED'

# Create a single WebRequestSession to preserve cookies and tokens
$session = New-Object Microsoft.PowerShell.Commands.WebRequestSession

# Set maximum redirects to prevent infinite loops
$maxRedirects = 10
$currentRedirect = 0
$currentUrl = $uri
$response = $null

# Loop to handle redirects
while ($currentRedirect -lt $maxRedirects) {
    try {
        # Make the web request
        $response = Invoke-WebRequest -Uri $currentUrl `
            -Method Get `
            -UserAgent "curl/123" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -WebSession $session `
            -Credential $cred `
            -Headers @{
                Accept = "*/*"
                "Accept-Encoding" = "gzip, deflate"
            } `
            -PreserveAuthorizationOnRedirect `
            -MaximumRedirection 0

        # Check if there's a 'Location' header in the response
        if ($response.Headers['Location']) {
            $currentUrl = $response.Headers['Location']
            Write-Host "Redirecting to: $currentUrl"
            $currentRedirect++
            continue
        } else {
            # No 'Location' header, assume final response
            break
        }
    } catch {
        # Handle exceptions
        if ($_.Exception.Response) {
            $resp = $_.Exception.Response
            $headers = $resp.Headers
            $location = $headers['Location']

            if ($location) {
                # We have a redirect, follow it
                Write-Host "Redirecting to: $location"
                $currentUrl = $location
                $currentRedirect++
                continue
            } else {
                # No Location header, cannot proceed
                Write-Error "No Location header in exception response. Exception message: $($_.Exception.Message)"
                break
            }
        } else {
            # No Response in exception, cannot proceed
            Write-Error "Exception occurred, but no Response. Exception message: $($_.Exception.Message)"
            break
        }
    }
}

# Output the final response
if ($response) {
    Write-Host "Final response received."
    Write-Host "Status Code: $($response.StatusCode)"
    Write-Host "Content Length: $($response.RawContentLength)"
    # You can process the response content here
    # For example, to output the content:
    # Write-Host $response.Content
} else {
    Write-Error "Failed to retrieve a valid response."
}
