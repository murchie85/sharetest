function Get-NewToken {
    param (
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(Mandatory=$true)]
        [string]$AuthUrl
    )
    
    try {
        $session = $null
        
        # Initial authentication request - don't follow redirects
        $response = Invoke-WebRequest -Uri $AuthUrl `
            -UserAgent "curl/123" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -SessionVariable session `
            -Credential $Credential `
            -Headers @{ Accept = "*/*" } `
            -MaximumRedirection 0 `
            -ErrorAction SilentlyContinue # Allow 302 response
            
        # If we got a 302, that's expected - get the redirect location
        if ($response.StatusCode -eq 302) {
            $redirectUrl = $response.Headers.Location
            Write-Host "Following redirect to: $redirectUrl"
            
            # Follow the redirect manually with the same session
            $redirectResponse = Invoke-WebRequest -Uri $redirectUrl `
                -UserAgent "curl/123" `
                -AllowUnencryptedAuthentication `
                -NoProxy `
                -WebSession $session `
                -Headers @{ Accept = "*/*" } `
                -MaximumRedirection 0 `
                -ErrorAction SilentlyContinue
        }
        
        if ($null -eq $session) {
            throw "Failed to create new session"
        }
        
        return @{
            Session = $session
            Response = $response
            RedirectUrl = $redirectUrl
        }
    }
    catch {
        Write-Error "Error in Get-NewToken: $($_.Exception.Message)"
        throw
    }
}

function Invoke-AuthenticatedRequest {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Url,
        [Parameter(Mandatory=$true)]
        [Microsoft.PowerShell.Commands.WebRequestSession]$Session,
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(Mandatory=$true)]
        [string]$InitialAuthUrl,
        [int]$RetryCount = 1
    )
    
    try {
        # Make request - don't follow redirects automatically
        $response = Invoke-WebRequest -Uri $Url `
            -UserAgent "curl/123" `
            -AllowUnencryptedAuthentication `
            -NoProxy `
            -WebSession $Session `
            -Headers @{ Accept = "*/*" } `
            -MaximumRedirection 0 `
            -ErrorAction SilentlyContinue
            
        # Handle redirect if needed
        if ($response.StatusCode -eq 302) {
            $redirectUrl = $response.Headers.Location
            Write-Host "Following redirect to: $redirectUrl"
            
            $response = Invoke-WebRequest -Uri $redirectUrl `
                -UserAgent "curl/123" `
                -AllowUnencryptedAuthentication `
                -NoProxy `
                -WebSession $Session `
                -Headers @{ Accept = "*/*" } `
                -MaximumRedirection 0
        }
            
        return $response
    }
    catch {
        if ($RetryCount -gt 0 -and $_.Exception.Response.StatusCode -eq 401) {
            Write-Host "Authentication failed, attempting refresh..."
            
            # Get new token
            $newAuth = Get-NewToken -Credential $Credential -AuthUrl $InitialAuthUrl
            
            # Retry with new session
            return Invoke-AuthenticatedRequest `
                -Url $Url `
                -Session $newAuth.Session `
                -Credential $Credential `
                -InitialAuthUrl $InitialAuthUrl `
                -RetryCount ($RetryCount - 1)
        }
        
        throw
    }
}

# Main execution block
try {
    # Create credential object
    $securePass = ConvertTo-SecureString $password -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential($username, $securePass)
    
    # Initial authentication - now handles 302 properly
    Write-Host "Performing initial authentication..."
    $auth = Get-NewToken -Credential $cred -AuthUrl $firstUrl
    $session = $auth.Session
    
    # Get redirect URL from initial response
    $nextUrl = $auth.RedirectUrl
    Write-Host "Next URL: $nextUrl"
    
    # Make subsequent request
    $response2 = Invoke-AuthenticatedRequest `
        -Url $nextUrl `
        -Session $session `
        -Credential $cred `
        -InitialAuthUrl $firstUrl
    
    # Continue with the rest of your workflow...
    
}
catch {
    Write-Error "Script failed: $($_.Exception.Message)"
    Write-Error $_.Exception
    throw
}