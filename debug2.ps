function Get-NewToken {
    param (
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(Mandatory=$true)]
        [string]$AuthUrl
    )
    
    try {
        $session = $null
        
        # Initial authentication request - explicitly handle 302
        try {
            $response = Invoke-WebRequest -Uri $AuthUrl `
                -Method Get `
                -UserAgent "curl/7.88.1" `
                -AllowUnencryptedAuthentication `
                -NoProxy `
                -SessionVariable session `
                -Credential $Credential `
                -Headers @{
                    Accept = "*/*"
                    "Accept-Encoding" = "gzip, deflate"
                } `
                -MaximumRedirection 0
        }
        catch [System.Net.WebException] {
            # Check if the exception is due to a 302 redirect
            if ($_.Exception.Response.StatusCode -eq 'Found') {
                $response = $_.Exception.Response
                $redirectUrl = $response.Headers['Location']
                Write-Host "Received redirect to: $redirectUrl"
                
                # Follow the redirect with the same session
                $response = Invoke-WebRequest -Uri $redirectUrl `
                    -Method Get `
                    -UserAgent "curl/7.88.1" `
                    -AllowUnencryptedAuthentication `
                    -NoProxy `
                    -WebSession $session `
                    -Headers @{
                        Accept = "*/*"
                        "Accept-Encoding" = "gzip, deflate"
                    }
            }
            else {
                throw
            }
        }
        
        if ($null -eq $session) {
            throw "Failed to create session"
        }
        
        return @{
            Session = $session
            Response = $response
            RedirectUrl = $redirectUrl
        }
    }
    catch {
        Write-Host "Full Error Details:"
        Write-Host $_.Exception.Message
        if ($_.Exception.Response) {
            Write-Host "Status Code: $($_.Exception.Response.StatusCode)"
            Write-Host "Status Description: $($_.Exception.Response.StatusDescription)"
            Write-Host "Headers: $($_.Exception.Response.Headers | ConvertTo-Json)"
        }
        throw
    }
}

function Invoke-AuthenticatedRequest {
    param (
        [Parameter(Mandatory=$true)]
        [string]$Url,
        [Parameter(Mandatory=$true)]
        [Microsoft.PowerShell.Commands.WebRequestSession]$Session,
        [Parameter(Mandatory=$true)]
        [System.Management.Automation.PSCredential]$Credential,
        [Parameter(Mandatory=$true)]
        [string]$InitialAuthUrl,
        [int]$RetryCount = 1
    )
    
    try {
        # Make request
        try {
            $response = Invoke-WebRequest -Uri $Url `
                -Method Get `
                -UserAgent "curl/7.88.1" `
                -AllowUnencryptedAuthentication `
                -NoProxy `
                -WebSession $Session `
                -Headers @{
                    Accept = "*/*"
                    "Accept-Encoding" = "gzip, deflate"
                } `
                -MaximumRedirection 0
        }
        catch [System.Net.WebException] {
            if ($_.Exception.Response.StatusCode -eq 'Found') {
                $response = $_.Exception.Response
                $redirectUrl = $response.Headers['Location']
                Write-Host "Following redirect to: $redirectUrl"
                
                $response = Invoke-WebRequest -Uri $redirectUrl `
                    -Method Get `
                    -UserAgent "curl/7.88.1" `
                    -AllowUnencryptedAuthentication `
                    -NoProxy `
                    -WebSession $Session `
                    -Headers @{
                        Accept = "*/*"
                        "Accept-Encoding" = "gzip, deflate"
                    }
            }
            else {
                throw
            }
        }
            
        return $response
    }
    catch {
        if ($RetryCount -gt 0 -and $_.Exception.Response.StatusCode -eq 401) {
            Write-Host "Authentication failed, attempting refresh..."
            
            # Get new token
            $newAuth = Get-NewToken -Credential $Credential -AuthUrl $InitialAuthUrl
            
            # Retry with new session
            return Invoke-AuthenticatedRequest `
                -Url $Url `
                -Session $newAuth.Session `
                -Credential $Credential `
                -InitialAuthUrl $InitialAuthUrl `
                -RetryCount ($RetryCount - 1)
        }
        
        Write-Host "Error Details:"
        Write-Host $_.Exception.Message
        if ($_.Exception.Response) {
            Write-Host "Status Code: $($_.Exception.Response.StatusCode)"
            Write-Host "Status Description: $($_.Exception.Response.StatusDescription)"
        }
        throw
    }
}

# Example usage
try {
    # Create credential object
    $securePass = ConvertTo-SecureString $password -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential($username, $securePass)
    
    Write-Host "Performing initial authentication..."
    $auth = Get-NewToken -Credential $cred -AuthUrl $firstUrl
    $session = $auth.Session
    
    Write-Host "Initial auth complete, redirect URL: $($auth.RedirectUrl)"
    
    if ($auth.RedirectUrl) {
        $response2 = Invoke-AuthenticatedRequest `
            -Url $auth.RedirectUrl `
            -Session $session `
            -Credential $cred `
            -InitialAuthUrl $firstUrl
            
        Write-Host "Final response status: $($response2.StatusCode)"
        Write-Host "Final response content length: $($response2.RawContentLength)"
    }
}
catch {
    Write-Error "Script failed: $($_.Exception.Message)"
    if ($_.Exception.Response) {
        Write-Error "Status Code: $($_.Exception.Response.StatusCode)"
        Write-Error "Status Description: $($_.Exception.Response.StatusDescription)"
    }
    throw
}