# Define credentials and initial URL
$username = "REDACTED"
$password = ConvertTo-SecureString "REDACTED" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $password)
$uri = 'REDACTED'

# Create a single WebRequestSession
$session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
$redirectLimit = 5

# Initial request
try {
    $response = Invoke-WebRequest -Uri $uri -Method Get -Credential $cred -WebSession $session -MaximumRedirection 0
    $redirectUrl = $response.Headers['Location']
} catch [System.Net.WebException] {
    if ($_.Exception.Response.Headers['Location']) {
        $redirectUrl = $_.Exception.Response.Headers['Location']
    } else {
        throw "Failed to retrieve redirect URL."
    }
}

# Sequential redirect handling
for ($i = 0; $i -lt $redirectLimit; $i++) {
    try {
        # Follow each redirect manually
        Write-Host "Redirecting to $redirectUrl"
        $response = Invoke-WebRequest -Uri $redirectUrl -Method Get -WebSession $session -MaximumRedirection 0

        # Check if another Location header exists (indicating further redirects)
        if ($response.Headers['Location']) {
            $redirectUrl = $response.Headers['Location']
        } else {
            # If no Location header, assume we have the final response
            Write-Host "Final response received."
            break
        }
    } catch [System.Net.WebException] {
        if ($_.Exception.Response.Headers['Location']) {
            $redirectUrl = $_.Exception.Response.Headers['Location']
        } else {
            throw "Failed to retrieve redirect URL at step $i."
        }
    }
}

# Output final content or status
if ($response) {
    Write-Host "Status Code: $($response.StatusCode)"
    Write-Host "Content: $($response.Content)"
} else {
    Write-Error "Unable to retrieve a valid response after redirects."
}
